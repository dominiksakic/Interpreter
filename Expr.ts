//Autogenerated AST by defineAST
import Token from "./Token.ts";

interface Visitor<T> {
  visitBinary(expr: BinaryExpr): T;
  visitGrouping(expr: GroupingExpr): T;
  visitLiteral(expr: LiteralExpr): T;
  visitUnary(expr: UnaryExpr): T;
}

abstract class Expr {
  abstract accept<T>(visitor: Visitor<T>): T;
}

class BinaryExpr extends Expr {
  left: Expr;
  operator: Token;
  right: Expr;
  constructor(left: Expr, operator: Token, right: Expr) {
    super();
    this.left = left;
    this.operator = operator;
    this.right = right;
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitBinary(this);
  }
}

class GroupingExpr extends Expr {
  expression: Expr;
  constructor(expression: Expr) {
    super();
    this.expression = expression;
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitGrouping(this);
  }
}

class LiteralExpr extends Expr {
  value: Object;
  constructor(value: Object) {
    super();
    this.value = value;
  }

  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitLiteral(this);
  }
}

class UnaryExpr extends Expr {
  operator: Token;
  right: Expr;
  constructor(operator: Token, right: Expr) {
    super();
    this.operator = operator;
    this.right = right;
  }
  accept<T>(visitor: Visitor<T>): T {
    return visitor.visitUnary(this);
  }
}

export default { BinaryExpr, GroupingExpr, LiteralExpr, UnaryExpr };

